name: Generated APK

on:
  workflow_dispatch:
    inputs:
      repository:
        description: "Github repo's URL"
        required: true

      repoBranch:
        description: "Which branch should we use? (also works with tags name, this will overwrite the tag in URL if it has one)"

      javaRuntime:
        description: 'Select java runtime env'
        required: true
        type: choice
        default: 'zulu'
        options:
          - temurin
          - zulu
          - adopt
          - adopt-openj9
          - liberica
          - microsoft
          - corretto
          - semeru
          - oracle
          - dragonwell
          - sapmachine
          - graalvm
      
      javaVersion:
        description: 'Input your Java version'
        required: true
        default: '17'
      
      runTestBuild:
        description: 'Run build test before building the app'
        type: boolean
        required: true
        default: false

run-name: "Generate APK for ${{ inputs.repository }} with ${{ inputs.javaRuntime }}v${{ inputs.javaVersion }}"

jobs:
  build:
    runs-on: ubuntu-latest

    if: ${{ inputs.repository }}
    steps:
      - name: "Extract info from repo's URL"
        run: |
          url="${{ inputs.repository }}"
          echo "hostname=$(echo '${{ inputs.repository }}' | awk -F/ '{print $1"//"$3}')" >> $GITHUB_ENV
          echo "username=$(echo '${{ inputs.repository }}' | awk -F/ '{print $4}')" >> $GITHUB_ENV
          echo "repo_name=$(echo '${{ inputs.repository }}' | awk -F/ '{print $5}')" >> $GITHUB_ENV
          branch_name=$(echo "$url" | awk -F/ '{print $7}')
          if [ -z "${{ inputs.repoBranch }}" ]; then
            if [ -z "$branch_name" ]; then
              branch_name="main"
            fi
          else
            branch_name="${{ inputs.repoBranch }}"
          fi
          echo 'branch_name='$branch_name >> $GITHUB_ENV

      - uses: actions/checkout@v4
        with:
          repository: "${{ env.username }}/${{ env.repo_name }}"
          submodules: recursive
          ref: ${{ inputs.repoBranch }}
          github-server-url: ${{ env.hostname }}

      # Set Current Date As Env Variable
      - name: Set current date as env variable
        run: echo "date_today=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Set Up JDK
        uses: actions/setup-java@v3
        with:
          distribution: ${{ inputs.javaRuntime }} # See 'Supported distributions' for available options
          java-version: ${{ inputs.javaVersion }}
          cache: 'gradle'

      - name: Change wrapper permissions
        run: chmod +x ./gradlew

      # Run Tests Build
      - name: Run gradle tests
        if: ${{ inputs.runTestBuild }}
        run: ./gradlew test

      # Run Build Project
      # - name: Build gradle project
      #   run: ./gradlew build

      # Create APK Debug
      - name: Build apk debug for ${{ env.repo_name }}
        run: ./gradlew assembleDebug

      # Create APK Release
      - name: Build apk release for ${{ env.repo_name }}
        run: ./gradlew assemble

      - name: Get Output Directory
        run: echo "output_path=$(find . -path '*build/outputs/apk' | head -n 1)" >> $GITHUB_ENV

      - name: Setup build tool version variable
        shell: bash
        run: |
          BUILD_TOOL_VERSION=$(ls /usr/local/lib/android/sdk/build-tools/ | tail -n 1)
          echo "BUILD_TOOL_VERSION=$BUILD_TOOL_VERSION" >> $GITHUB_ENV
          echo Last build tool version is: $BUILD_TOOL_VERSION

      - name: Sign APK with testkey
        uses: r0adkll/sign-android-release@v1
        id: sign_app
        with:
          releaseDirectory: ${{ env.output_path }}/release/
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
        env:
          BUILD_TOOLS_VERSION: ${{ env.BUILD_TOOL_VERSION }}

      # Upload Artifact Build
      # Noted For Output [main_project_module]/build/outputs/apk/debug/
      - name: Upload APK Debug - ${{ env.repo_name }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.date_today }} - ${{ env.repo_name }} (${{ env.username }}) - debug
          path: ${{ env.output_path }}/debug/

      # Noted For Output [main_project_module]/build/outputs/apk/release/
      - name: Upload APK Release - ${{ env.repository_name }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.date_today }} - ${{ env.repo_name }} (${{ env.username }}) - release signed
          # path: ${{ env.output_path }}/release/
          path: ${{ steps.sign_app.outputs.signedReleaseFile }}
